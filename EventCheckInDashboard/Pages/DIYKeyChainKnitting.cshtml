@page
@model EventCheckInDashboard.Pages.DIYKeyChainKnittingModel
@{
    ViewData["Title"] = "JOYFINITY CELEBRATION The 1ts ANNIVERSARY - DIY KEY CHAIN KNITTING";
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}
else
{
    <div class="row">
        <!-- Left Column -->
        <div class="col-lg-6">
            <!-- Spin Section -->
            <div class="spin-section">
                <div class="spin-title">5.DIY KEY CHAIN KNITTING</div>
                <div class="spin-content">
                    <div class="wheel-image">
                        <div class="wheel-inner">DIY<br>KEY CHAIN</div>
                    </div>
                    <div class="spin-info">
                        <div class="info-item">
                            <span class="info-label">TARGET</span>
                            <span class="info-value">150 สิทธิ์</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">ACTUAL</span>
                            <span class="info-value" id="actualValue">@Model.ActualRights.ToString("N0")  สิทธิ์</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stacked Bar Chart -->
            <div class="chart-container2">
                <div class="stacked-chart-wrapper2">
                    <canvas id="stackedBarChart"></canvas>
                </div>
            </div>

            <!-- Left Table -->
            <div class="table-container">
                <table class="table table-bordered data-table">
                    <thead>
                        <tr>
                            @foreach (var header in Model.SegmentTableHeaders)
                            {
                                if (header == "Segment")
                                {
                                    <th></th>
                                }
                                else if (header.ToUpper().Contains("TOTAL"))
                                {
                                    <th>TOTAL BY<br>SEGMENT</th>
                                }
                                else
                                {
                                    <th>@header.ToUpper()</th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.SegmentTableData)
                        {
                            var rowData = (IDictionary<string, object>)row;
                            var segmentName = rowData[Model.SegmentTableHeaders[0]].ToString();
                            var rowClass = "row-" + segmentName.ToLower().Replace(" ", "-").Replace("กะรัต", "");
                            if (segmentName.Contains("TOTAL")) { rowClass = "row-total"; }

                            <tr class="@rowClass">
                                @foreach (var header in Model.SegmentTableHeaders)
                                {
                                    if (header == "Segment")
                                    {
                                        <td><strong>@Html.Raw(segmentName.Replace("TOTALBYDAY", "TOTAL<br>BY DAY"))</strong></td>
                                    }
                                    else if (header.ToUpper().Contains("TOTAL"))
                                    {
                                        <td class="@(segmentName.Contains("TOTAL") ? "total-value" : "green-total")">@rowData[header]</td>
                                    }
                                    else
                                    {
                                        <td>@(rowData[header].ToString() == "0" ? "" : rowData[header])</td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Right Column -->
        <div class="col-lg-6">
            <!-- 3D Pie Chart -->
            <div class="pie-container-2">
                <div class="pie-wrapper">
                    <div class="pie-chart-3d">
                        <canvas id="pieChart"></canvas>
                    </div>
                </div>
            </div>
            <p class="section-title">จำนวนสมาชิกแต่ละTIERทั้งหมดที่ร่วมกิจกรรม</p>

            <!-- Right Table -->
            <div class="table-container">
                <table class="table table-bordered data-table">
                    <thead>
                        <tr>
                            @foreach (var header in Model.TierTableHeaders)
                            {
                                if (header == "Tier")
                                {
                                    <th></th>
                                }
                                else if (header.ToUpper().Contains("TOTAL"))
                                {
                                    <th>TOTAL<br>BY TIER</th>
                                }
                                else
                                {
                                    <th>@header.ToUpper()</th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.TierTableData)
                        {
                            var rowData = (IDictionary<string, object>)row;
                            var tierName = rowData[Model.TierTableHeaders[0]].ToString();
                            var rowClass = "row-" + tierName.ToLower().Replace(" ", "-");
                            if (tierName.Contains("TOTAL")) { rowClass = "row-total"; }

                            <tr class="@rowClass">
                                @foreach (var header in Model.TierTableHeaders)
                                {
                                    if (header == "Tier")
                                    {
                                        <td><strong>@Html.Raw(tierName.Replace("TOTAL MEMBER BY DAY", "TOTAL<br>MEMBER<br>BY DAY"))</strong></td>
                                    }
                                    else if (header.ToUpper().Contains("TOTAL"))
                                    {
                                        <td class="@(tierName.Contains("TOTAL") ? "total-value" : "green-total")">@rowData[header]</td>
                                    }
                                    else
                                    {
                                        <td>@(rowData[header].ToString() == "0" ? "" : rowData[header])</td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            Chart.register(ChartDataLabels);
            // ================== STACKED BAR CHART ==================
            const stackedDataJson = '@Html.Raw(Model.StackedBarChartJson)';
            if(stackedDataJson) {
                const stackedData = JSON.parse(stackedDataJson);
                const stackedCtx = document.getElementById('stackedBarChart').getContext('2d');
                const stackedChart = new Chart(stackedCtx, {
                    type: 'bar',
                    data: stackedData,
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: {
                            legend: { position: 'bottom', labels: { usePointStyle: true, padding: 20, font: { size: 13, family: 'Inter', weight: 500 } } },
                            tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.8)', padding: 12, cornerRadius: 8, titleFont: { size: 14, family: 'Inter' }, bodyFont: { size: 13, family: 'Inter' },
                                callbacks: { afterBody: (context) => 'รวม: ' + context.reduce((sum, item) => sum + item.parsed.y, 0) }
                            },
                            datalabels: {
                                display: true,
                                anchor: 'end',
                                align: 'top',
                                color: '#444',
                                font: {
                                    family: 'Inter',
                                    weight: 500,
                                    size: 11
                                },
                                formatter: (value, context) => {
                                    return value > 0 ? value.toLocaleString('en-US') : '';
                                }
                            }
                        },
                        scales: {
                            x: { stacked: true, ticks: { font: { size: 12, family: 'Inter' } }, grid: { display: false } },
                            y: { stacked: true, beginAtZero: true, max: 200, ticks: { stepSize: 50, font: { size: 12, family: 'Inter' } }, grid: { color: 'rgba(0, 0, 0, 0.05)' } }
                        },
                        animation: { duration: 1500, easing: 'easeInOutQuart' }
                    }
                });
            }

            // ================== 3D PIE CHART ==================
            const pieDataJson = '@Html.Raw(Model.PieChartJson)';
            if(pieDataJson) {
                const pieApiData = JSON.parse(pieDataJson);
                const tierColors = {
                    'NAVY': 'rgba(59, 130, 246, 0.9)', 'SCARLET': 'rgba(239, 68, 68, 0.9)',
                    'CROWN': 'rgba(156, 163, 175, 0.9)', 'VEGA': 'rgba(234, 179, 8, 0.9)'
                };
                const pieData = {
                    labels: pieApiData.map(d => d.Tier),
                    datasets: [{
                        data: pieApiData.map(d => d.MemberCount),
                        backgroundColor: pieApiData.map(d => tierColors[d.Tier.toUpperCase()] || '#6c757d'),
                        borderWidth: 4, borderColor: '#fff', hoverOffset: 15, hoverBorderWidth: 5
                    }]
                };

                const pieCtx = document.getElementById('pieChart').getContext('2d');
                const pieChart = new Chart(pieCtx, {
                    type: 'doughnut',
                    data: pieData,
                    options: {
                        responsive: true, maintainAspectRatio: false, cutout: '45%',
                        plugins: {
                            legend: { position: 'right', labels: { padding: 20, font: { size: 13, family: 'Inter', weight: 500 }, usePointStyle: true, pointStyle: 'circle' } },
                            tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.8)', padding: 12, cornerRadius: 8, titleFont: { size: 14, family: 'Inter' }, bodyFont: { size: 13, family: 'Inter' },
                                callbacks: { label: (context) => (context.label || '') + ': ' + context.parsed + ' คน' }
                            },
                              datalabels: {
                                    display: true,
                                    color: '#333',
                                    font: {
                                        family: 'Inter',
                                        weight: 'bold',
                                        size: 13
                                    },
                                    formatter: (value, context) => {
                                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                        const percentage = (value / total) * 100;
                                        return percentage > 1 ? percentage.toFixed(0) + '%' : '';
                                    }
                                }
                        },
                        animation: { animateRotate: true, animateScale: true, duration: 2000, easing: 'easeInOutQuart' }
                    }
                });
            }

            // 3D hover effect for pie chart
            const pieWrapper = document.querySelector('.pie-wrapper');
            if (pieWrapper) {
                pieWrapper.addEventListener('mousemove', (e) => {
                    const rect = pieWrapper.getBoundingClientRect();
                    const x = e.clientX - rect.left; const y = e.clientY - rect.top;
                    const centerX = rect.width / 2; const centerY = rect.height / 2;
                    const rotateY = (x - centerX) / 20; const rotateX = -(y - centerY) / 20;
                    pieWrapper.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(10px)`;
                });
                pieWrapper.addEventListener('mouseleave', () => {
                    pieWrapper.style.transform = 'rotateX(0deg) rotateY(0deg) translateZ(0px)';
                });
            }
            document.getElementById("a_stpw").classList.add("active");
        });

    </script>
    }