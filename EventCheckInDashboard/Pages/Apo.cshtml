@page
@model EventCheckInDashboard.Pages.ApoModel
@{
    ViewData["Title"] = "Dashboard D&S 2025 - 05 EXCLUSIVE CHILL & TALK WITH APO NATTAWIN";
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}
else
{
<div class="row">
    <!-- Left Column -->
    <div class="col-lg-6">
        <!-- Event Section -->
        <div class="event-section">
            <div class="event-header">
                <div class="event-image">
                    <div class="event-placeholder">APO<br>NATTAWIN</div>
                    <!-- หรือใส่รูปจริง: <img src="path-to-image.jpg" alt="APO NATTAWIN"> -->
                </div>
                <div class="event-info">
                    <div class="event-title">5. EXCLUSIVE CHILL & TALK<br>WITH APO NATTAWIN</div>
                        <div class="event-actual">ACTUAL <span id="actualValue">@Model.ActualTotalMembers.ToString("N0")</span> คน</div>
                </div>
            </div>
        </div>

        <!-- Stacked Bar Chart -->
        <div class="chart-section-5">
            <div class="chart-wrapper-5">
                <canvas id="stackedBarChart"></canvas>
            </div>
        </div>

            <!-- Left Table -->
            <div class="table-container">
                <table class="table table-bordered data-table">
                    <thead>
                        <tr>
                            <!-- สามารถปรับแก้ให้เป็นวันที่ปัจจุบันได้หากต้องการ -->
                            <th colspan="2">17 OCT</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.DailyBreakdown)
                        {
                            <tr class="row-@item.Label.ToLower().Replace(" ", "-")">
                                <td class="total-label">@item.Label</td>
                                <td><strong>@item.Value.ToString("N0")</strong></td>
                            </tr>
                        }
                        <tr class="row-total">
                            <td class="total-label">TOTAL BY DAY</td>
                            <td><strong>@Model.DailyBreakdown.Sum(x => (int)x.Value).ToString("N0")</strong></td>
                        </tr>
                    </tbody>
                </table>
            </div>
    </div>

    <!-- Right Column -->
    <div class="col-lg-6">
        <!-- 3D Pie Chart -->
        <div class="pie-container-5">
            <div class="pie-wrapper">
                <div class="pie-chart-3d">
                    <canvas id="pieChart"></canvas>
                </div>
            </div>
        </div>
        <p class="section-title">จำนวนสมาชิกแต่ละTIERทั้งหมดที่ร่วมกิจกรรม</p>

            <!-- Right Table -->
            <div class="table-container">
                <table class="table table-bordered data-table">
                    <thead>
                        <tr>
                            <!-- สามารถปรับแก้ให้เป็นวันที่ปัจจุบันได้หากต้องการ -->
                            <th colspan="2">17 OCT</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.TierBreakdown)
                        {
                            <tr class="row-@item.Tier.ToLower()">
                                <td class="total-label">@item.Tier</td>
                                <td><strong>@item.MemberCount.ToString("N0")</strong></td>
                            </tr>
                        }
                        <tr class="row-total">
                            <td class="total-label">TOTAL MEMBER BY DAY</td>
                            <td><strong>@Model.TierBreakdown.Sum(x => (int)x.MemberCount).ToString("N0")</strong></td>
                        </tr>
                    </tbody>
                </table>
            </div>
    </div>
</div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
<script>
         document.addEventListener('DOMContentLoaded', function () {
                 Chart.register(ChartDataLabels);
        const stackedDataJson = '@Html.Raw(Model.StackedBarChartJson)';
            if (stackedDataJson) {
                const stackedData = JSON.parse(stackedDataJson);
                const stackedCtx = document.getElementById('stackedBarChart').getContext('2d');
                const stackedChart = new Chart(stackedCtx, {
                    type: 'bar',
                    data: stackedData,
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: {
                            legend: { position: 'bottom', labels: { usePointStyle: true, padding: 20, font: { size: 13, family: 'Inter', weight: 500 }}},
                            tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.8)', padding: 12, cornerRadius: 8, titleFont: { size: 14, family: 'Inter' }, bodyFont: { size: 13, family: 'Inter' },
                                callbacks: {
                                    afterBody: function(context) {
                                        let total = 0;
                                        context.forEach(item => { total += item.parsed.y; });
                                        return '\nรวมทั้งหมด: ' + total + ' คน';
                                    }
                                }
                            }
                        },
                        scales: {
                            x: { stacked: true, ticks: { font: { size: 13, family: 'Inter', weight: 600 }}, grid: { display: false }},
                            y: { stacked: true, beginAtZero: true, max: 1000, ticks: { stepSize: 200, font: { size: 12, family: 'Inter' }}, grid: { color: 'rgba(0, 0, 0, 0.05)' }}
                        },
                        animation: { duration: 1500, easing: 'easeInOutQuart' }
                    }
                });
                 // Plugin สำหรับแสดงยอดรวมบน Bar Chart
                Chart.register({
                    id: 'topLabels',
                    afterDatasetsDraw: function(chart) {
                        const ctx = chart.ctx;
                        const meta = chart.getDatasetMeta(chart.data.datasets.length - 1);
                         if (!meta.hidden) {
                            meta.data.forEach(function(element, index) {
                                ctx.fillStyle = '#1f2937';
                                const fontSize = 16;
                                const fontStyle = 'bold';
                                const fontFamily = 'Inter';
                                ctx.font = Chart.helpers.toFontString(fontSize, fontStyle, fontFamily);
                                let total = 0;
                                chart.data.datasets.forEach(ds => { total += ds.data[index]; });
                                const dataString = total.toString();
                                ctx.textAlign = 'center';
                                ctx.textBaseline = 'bottom';
                                const padding = 5;
                                const position = element.tooltipPosition();
                                ctx.fillText(dataString, position.x, position.y - padding);
                            });
                        }
                    }
                });
            }


            // ================== 3D PIE CHART ==================
            const pieDataJson = '@Html.Raw(Model.PieChartJson)';
            if (pieDataJson) {
                const pieApiData = JSON.parse(pieDataJson);
                const tierColors = {
                    'NAVY': 'rgba(59, 130, 246, 0.95)',
                    'SCARLET': 'rgba(239, 68, 68, 0.95)',
                    'CROWN': 'rgba(156, 163, 175, 0.5)',
                    'VEGA': 'rgba(234, 179, 8, 0.5)'
                };
                const pieData = {
                    labels: pieApiData.map(d => d.Tier),
                    datasets: [{
                        data: pieApiData.map(d => d.MemberCount),
                        backgroundColor: pieApiData.map(d => tierColors[d.Tier.toUpperCase()] || '#6c757d'),
                        borderWidth: 6, borderColor: '#fff', hoverOffset: 20, hoverBorderWidth: 8
                    }]
                };

                const pieCtx = document.getElementById('pieChart').getContext('2d');
                const pieChart = new Chart(pieCtx, {
                    type: 'doughnut',
                    data: pieData,
                    options: {
                         responsive: true, maintainAspectRatio: false, cutout: '50%',
                        plugins: {
                            legend: { position: 'right', labels: { padding: 20, font: { size: 13, family: 'Inter', weight: 500 }, usePointStyle: true, pointStyle: 'circle',
                                generateLabels: function(chart) {
                                    const data = chart.data;
                                    return data.labels.map((label, i) => {
                                        const value = data.datasets[0].data[i];
                                        return { text: label + ' (' + value + ' คน)', fillStyle: data.datasets[0].backgroundColor[i], hidden: false, index: i };
                                    });
                                }
                            }},
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)', padding: 12, cornerRadius: 8, titleFont: { size: 14, family: 'Inter' }, bodyFont: { size: 13, family: 'Inter' },
                                callbacks: {
                                    label: function(context) {
                                        let label = context.label || '';
                                        let value = context.parsed;
                                        let total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        let percentage = total > 0 ? ((value / total) * 100).toFixed(0) : 0;
                                        return label + ': ' + value + ' คน (' + percentage + '%)';
                                    }
                                }
                            },
                            datalabels: {
                                display: true,
                                color: '#333',
                                font: {
                                    family: 'Inter',
                                    weight: 'bold',
                                    size: 13
                                },
                                formatter: (value, context) => {
                                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                    const percentage = (value / total) * 100;
                                    return percentage > 1 ? percentage.toFixed(0) + '%' : '';
                                }
                            }
                        },
                        animation: { animateRotate: true, animateScale: true, duration: 2000, easing: 'easeInOutQuart' }
                    }
                });
            }

            // 3D hover effect for pie chart
            const pieWrapper = document.querySelector('.pie-wrapper');
            if (pieWrapper) {
                pieWrapper.addEventListener('mousemove', (e) => {
                    const rect = pieWrapper.getBoundingClientRect();
                    const x = e.clientX - rect.left; const y = e.clientY - rect.top;
                    const centerX = rect.width / 2; const centerY = rect.height / 2;
                    const rotateY = (x - centerX) / 20; const rotateX = -(y - centerY) / 20;
                    pieWrapper.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(10px)`;
                });
                pieWrapper.addEventListener('mouseleave', () => {
                    pieWrapper.style.transform = 'rotateX(0deg) rotateY(0deg) translateZ(0px)';
                });
            }
    document.getElementById("a_exapo").classList.add("active");
            });
</script>
}
